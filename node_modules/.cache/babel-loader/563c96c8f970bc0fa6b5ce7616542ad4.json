{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\capta\\\\OneDrive\\\\Desktop\\\\rangerappl\\\\basic\\\\src\\\\components\\\\List\\\\List.jsx\";\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\n\nconst List = () => {\n  // need a state to keep track of todos\n  const [todos, setTodos] = useState([]); // need state to keep track of the value in the input\n\n  const [todo, setTodo] = useState(\"\"); // useEffect to run once the component mounts\n\n  useEffect(() => {\n    // localstorage only support storing strings as keys and values\n    // - therefore we cannot store arrays and objects without converting the object\n    // into a string first. JSON.stringify will convert the object into a JSON string\n    // reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n    localStorage.setItem(\"todos\", JSON.stringify(todos)); // add the todos as a dependancy because we want to update the\n    // localstorage anytime the todos state changes\n  }, [todos]); // function to get the value of the input and set the new state\n\n  function handleInputChange(e) {\n    setTodo(e.target.value);\n  } // function to create a new object on form submit\n\n\n  function handleFormSubmit(e) {\n    // prevent the browser default behavior or refreshing the page on submit\n    e.preventDefault(); // don't submit if the input is an empty string\n\n    if (todo !== \"\") {\n      // set the new todos state (the array)\n      setTodos([// copy the current values in state\n      ...todos, {\n        // setting a basic id to identify the object\n        id: todos.length + 1,\n        // set a text property to the value of the todo state and \n        // trim the whitespace from the input\n        text: todo.trim()\n      }]);\n    } // clear out the input box\n\n\n    setTodo(\"\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"todo\",\n    type: \"text\",\n    placeholder: \"Create a new todo\",\n    value: todo,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"todo-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, todos.map(todo => /*#__PURE__*/React.createElement(\"li\", {\n    key: todo.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, todo.text))));\n};\n\nexport default List;","map":{"version":3,"sources":["C:/Users/capta/OneDrive/Desktop/rangerappl/basic/src/components/List/List.jsx"],"names":["React","useState","useEffect","List","todos","setTodos","todo","setTodo","localStorage","setItem","JSON","stringify","handleInputChange","e","target","value","handleFormSubmit","preventDefault","id","length","text","trim","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAEjB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CAHiB,CAIjB;;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC,CALiB,CAOjB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AACA;AACAM,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeP,KAAf,CAA9B,EALc,CAMd;AACA;AACD,GARQ,EAQN,CAACA,KAAD,CARM,CAAT,CARiB,CAkBjB;;AACA,WAASQ,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5BN,IAAAA,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GArBgB,CAuBjB;;;AACA,WAASC,gBAAT,CAA0BH,CAA1B,EAA6B;AAC3B;AACAA,IAAAA,CAAC,CAACI,cAAF,GAF2B,CAI3B;;AACA,QAAIX,IAAI,KAAK,EAAb,EAAiB;AACf;AACAD,MAAAA,QAAQ,CAAC,CACP;AACA,SAAGD,KAFI,EAGP;AACE;AACAc,QAAAA,EAAE,EAAEd,KAAK,CAACe,MAAN,GAAe,CAFrB;AAGE;AACA;AACAC,QAAAA,IAAI,EAAEd,IAAI,CAACe,IAAL;AALR,OAHO,CAAD,CAAR;AAWD,KAlB0B,CAoB3B;;;AACAd,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD;;AAEC,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGA;AAAM,IAAA,QAAQ,EAAES,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,WAAW,EAAC,mBAHd;AAIE,IAAA,KAAK,EAAEV,IAJT;AAKE,IAAA,QAAQ,EAAEM,iBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAHA,eAiBA;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGR,KAAK,CAACkB,GAAN,CAAWhB,IAAD,iBACT;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACY,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBZ,IAAI,CAACc,IAAxB,CADD,CALH,CAjBA,CADF;AA6BH,CA7ED;;AA+EA,eAAejB,IAAf","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst List = () => {\r\n\r\n  // need a state to keep track of todos\r\n  const [todos, setTodos] = useState([]);\r\n  // need state to keep track of the value in the input\r\n  const [todo, setTodo] = useState(\"\");\r\n\r\n  // useEffect to run once the component mounts\r\n  useEffect(() => {\r\n    // localstorage only support storing strings as keys and values\r\n    // - therefore we cannot store arrays and objects without converting the object\r\n    // into a string first. JSON.stringify will convert the object into a JSON string\r\n    // reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n    // add the todos as a dependancy because we want to update the\r\n    // localstorage anytime the todos state changes\r\n  }, [todos]);\r\n\r\n  // function to get the value of the input and set the new state\r\n  function handleInputChange(e) {\r\n    setTodo(e.target.value);\r\n  }\r\n\r\n  // function to create a new object on form submit\r\n  function handleFormSubmit(e) {\r\n    // prevent the browser default behavior or refreshing the page on submit\r\n    e.preventDefault();\r\n\r\n    // don't submit if the input is an empty string\r\n    if (todo !== \"\") {\r\n      // set the new todos state (the array)\r\n      setTodos([\r\n        // copy the current values in state\r\n        ...todos,\r\n        {\r\n          // setting a basic id to identify the object\r\n          id: todos.length + 1,\r\n          // set a text property to the value of the todo state and \r\n          // trim the whitespace from the input\r\n          text: todo.trim()\r\n        }\r\n      ]);\r\n    }\r\n\r\n    // clear out the input box\r\n    setTodo(\"\");\r\n  }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      {/* create a form element and pass the handleFormSubmit function \r\n      to the form using the onSubmit prop */}\r\n      <form onSubmit={handleFormSubmit}>\r\n        {/* create an input element - make sure to add the value prop \r\n        with the state value passed in and the onChange prop to update\r\n        the state every time something is typed in the input */}\r\n        <input\r\n          name=\"todo\"\r\n          type=\"text\"\r\n          placeholder=\"Create a new todo\"\r\n          value={todo}\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n\r\n      {/* create a ul to hold all of the list items */}\r\n      <ul className=\"todo-list\">\r\n        {/* map over the todos array which creates a new li element for every todo\r\n        (make sure to add the \"key\" prop using the unique todo.id value to the li element)\r\n        remember this is an array of objects - so we need to access the property \r\n        \"text\" to get the value we want to display */}\r\n        {todos.map((todo) => (\r\n          <li key={todo.id}>{todo.text}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default List;"]},"metadata":{},"sourceType":"module"}