{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\capta\\\\OneDrive\\\\Desktop\\\\rangerappl\\\\basic\\\\src\\\\components\\\\List\\\\List.jsx\";\nimport React from 'react';\nimport { useState, useEffect } from \"react\";\n\nconst List = () => {\n  const [todos, setTodos] = useState(() => {\n    const savedTodos = localStorage.getItem(\"todos\");\n\n    if (savedTodos) {\n      return JSON.parse(savedTodos);\n    } else {\n      return [];\n    }\n  });\n  const [todo, setTodo] = useState(\"\");\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTodo, setCurrentTodo] = useState({}); //displays items\n\n  useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n  }, [todos]);\n\n  function handleInputChange(e) {\n    setTodo(e.target.value);\n  } // function to get the value of the edit input and set the new state\n\n\n  function handleEditInputChange(e) {\n    // set the new state value to what's currently in the edit input box\n    setCurrentTodo({ ...currentTodo,\n      text: e.target.value\n    });\n    console.log(currentTodo);\n  }\n\n  function handleFormSubmit(e) {\n    e.preventDefault();\n\n    if (todo !== \"\") {\n      setTodos([...todos, {\n        id: todos.length + 1,\n        text: todo.trim()\n      }]);\n    }\n\n    setTodo(\"\");\n  }\n\n  function handleEditFormSubmit(e) {\n    e.preventDefault();\n    handleUpdateTodo(currentTodo.id, currentTodo);\n  }\n\n  function handleDeleteClick(id) {\n    const removeItem = todos.filter(todo => {\n      return todo.id !== id;\n    });\n    setTodos(removeItem);\n  } // function to edit a todo item\n\n\n  function handleUpdateTodo(id, updatedTodo) {\n    // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\n    // if the id's match, use the second parameter to pass in the updated todo object\n    // otherwise just use old todo\n    const updatedItem = todos.map(todo => {\n      return todo.id === id ? updatedTodo : todo;\n    }); // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\n\n    setIsEditing(false); // update the todos state with the updated todo\n\n    setTodos(updatedItem);\n  } // function to handle when the \"Edit\" button is clicked\n\n\n  function handleEditClick(todo) {\n    // set editing to true\n    setIsEditing(true); // set the currentTodo to the todo item that was clicked\n\n    setCurrentTodo({ ...todo\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"todo\",\n    type: \"text\",\n    placeholder: \"Create a new todo\",\n    value: todo,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"todo-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, todos.map(todo => /*#__PURE__*/React.createElement(\"li\", {\n    key: todo.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, todo.text, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleDeleteClick(todo.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, \"X\")))));\n};\n\nexport default List;","map":{"version":3,"sources":["C:/Users/capta/OneDrive/Desktop/rangerappl/basic/src/components/List/List.jsx"],"names":["React","useState","useEffect","List","todos","setTodos","savedTodos","localStorage","getItem","JSON","parse","todo","setTodo","isEditing","setIsEditing","currentTodo","setCurrentTodo","setItem","stringify","handleInputChange","e","target","value","handleEditInputChange","text","console","log","handleFormSubmit","preventDefault","id","length","trim","handleEditFormSubmit","handleUpdateTodo","handleDeleteClick","removeItem","filter","updatedTodo","updatedItem","map","handleEditClick"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst List = () => {\r\n\r\n  const [todos, setTodos] = useState(() => {\r\n    const savedTodos = localStorage.getItem(\"todos\");\r\n    if (savedTodos) {\r\n      return JSON.parse(savedTodos);\r\n    } else {\r\n      return [];\r\n    }\r\n  });\r\n  const [todo, setTodo] = useState(\"\");\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentTodo, setCurrentTodo] = useState({});\r\n\r\n  //displays items\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n\r\n  function handleInputChange(e) {\r\n    setTodo(e.target.value);\r\n  }\r\n\r\n  // function to get the value of the edit input and set the new state\r\n  function handleEditInputChange(e) {\r\n    // set the new state value to what's currently in the edit input box\r\n    setCurrentTodo({ ...currentTodo, text: e.target.value });\r\n    console.log(currentTodo);\r\n  }\r\n\r\n  function handleFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (todo !== \"\") {\r\n      setTodos([\r\n        ...todos,\r\n        {\r\n          id: todos.length + 1,\r\n          text: todo.trim()\r\n        }\r\n      ]);\r\n    }\r\n\r\n    setTodo(\"\");\r\n  }\r\n\r\n  function handleEditFormSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    handleUpdateTodo(currentTodo.id, currentTodo);\r\n  }\r\n\r\n  function handleDeleteClick(id) {\r\n    const removeItem = todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    setTodos(removeItem);\r\n  }\r\n\r\n  // function to edit a todo item\r\n  function handleUpdateTodo(id, updatedTodo) {\r\n    // here we are mapping over the todos array - the idea is check if the todo.id matches the id we pass into the function\r\n    // if the id's match, use the second parameter to pass in the updated todo object\r\n    // otherwise just use old todo\r\n    const updatedItem = todos.map((todo) => {\r\n      return todo.id === id ? updatedTodo : todo;\r\n    });\r\n    // set editing to false because this function will be used inside a onSubmit function - which means the data was submited and we are no longer editing\r\n    setIsEditing(false);\r\n    // update the todos state with the updated todo\r\n    setTodos(updatedItem);\r\n  }\r\n\r\n  // function to handle when the \"Edit\" button is clicked\r\n  function handleEditClick(todo) {\r\n    // set editing to true\r\n    setIsEditing(true);\r\n    // set the currentTodo to the todo item that was clicked\r\n    setCurrentTodo({ ...todo });\r\n  }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      {/* create a form element and pass the handleFormSubmit function \r\n      to the form using the onSubmit prop */}\r\n      <form onSubmit={handleFormSubmit}>\r\n        {/* create an input element - make sure to add the value prop \r\n        with the state value passed in and the onChange prop to update\r\n        the state every time something is typed in the input */}\r\n        <input\r\n          name=\"todo\"\r\n          type=\"text\"\r\n          placeholder=\"Create a new todo\"\r\n          value={todo}\r\n          onChange={handleInputChange}\r\n        />\r\n      </form>\r\n\r\n      {/* create a ul to hold all of the list items */}\r\n      <ul className=\"todo-list\">\r\n        {todos.map((todo) => (\r\n          <li key={todo.id}>\r\n            {todo.text} <button onClick={() => handleDeleteClick(todo.id)}>X</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default List;"]},"metadata":{},"sourceType":"module"}